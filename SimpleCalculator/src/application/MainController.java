package application;

import java.util.ArrayList;

import javafx.animation.PauseTransition;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.input.KeyEvent;
import javafx.util.Duration;

/** 
 * Main controller class for Simple Calculator. Listens for user input,
 * routes input to relevant methods in the model class and updates the
 * display based on the state returned by the model.
 * 
 * @author Jamie Ferguson Gunn
 */

public class MainController {
	
	// The calculator's display
	@FXML
	private Label readout;
	// List of digit buttons
	@FXML
	private ArrayList<Button> digits;
	// List of operator buttons
	@FXML
	private ArrayList<Button> operators;
	//The calculator model
	private Calculator model = new MainModel();
	
	/**
	 * Digit button clicked.
	 * 
	 * @param event ActionEvent generated by digit button
	 */
	
	@FXML
	public void digitPressed(ActionEvent event) {
		model.addDigit(((Button)event.getSource()).getText().charAt(0));
		updateReadout();
	}
	
	/**
	 * Operator button clicked.
	 * 
	 * @param event ActionEvent generated by operator button
	 */
	
	@FXML
	public void operatorPressed(ActionEvent event) {
		String text = ((Button)event.getSource()).getText();
		if (text.equals("="))
			model.equals();
		else if (text.equals("."))
			model.addDecimal();
		else
			model.addOperator(text.charAt(0));
		updateReadout();
	}
	
	/**
	 * Key pressed.
	 * 
	 * @param event KeyEvent generated by key press
	 */
	
	@FXML
	public void keyPressed(KeyEvent event) {
		event.consume();
		if (event.getCode().isDigitKey()) {
			// Routes digit key press through digit button and simulates button press in UI
			int index = Integer.valueOf(event.getText());
			simulateButtonPress(digits.get(index));
		}
		else  {
			int index = -1;
			switch (event.getCode()) {
				case ENTER: case SPACE: index = 0; break;
				case DIVIDE: index = 1; break;
				case MULTIPLY: index = 2; break;
				case ADD: index = 3; break;
				case SUBTRACT: index = 4; break;
				case DECIMAL: index = 5; break;
				case BACK_SPACE: model.delete(); break;
				default: break;				
			}
			if (index >= 0) {
				simulateButtonPress(operators.get(index));	
			}
				
		}
		updateReadout();
	}
	
	// Private method to simulate button click on screen when corresponding key is pressed
	private void simulateButtonPress(Button b) {
		b.arm();
		b.fire();
		PauseTransition pause = new PauseTransition(Duration.seconds(0.1));
		pause.setOnFinished(e -> b.disarm());
		pause.play();
	}
	
	// Updates text on display label
	private void updateReadout() {
		readout.setText(model.display());
	}
}
